<%#
 Copyright 2017-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const query = this.generateEntityQueries(relationships, entityInstance, dto);
const queries = query.queries;
const variables = query.variables;
let hasManyToMany = query.hasManyToMany;
_%>
import { Component, OnInit<% if (anyFieldHasImageContentType) { %>, ViewChild<% } %>, inject } from '@angular/core';
<%_ if (anyFieldIsBlobDerived) { _%>
import { JhiDataUtils } from '#app/services/utils/data-util.service';
<%_ } _%>
<%_ if (anyFieldHasImageContentType) { _%>
import { Capacitor } from '@capacitor/core';
import { Camera, ImageOptions, CameraResultType } from '@capacitor/camera';
<%_ } _%>
import { UntypedFormBuilder as FormBuilder, Validators } from '@angular/forms';
import { NavController, Platform, ToastController<% if (anyFieldHasImageContentType) { %>, AlertController<% } %> } from '@ionic/angular';
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { <%= entityAngularName %> } from './<%= entityFileName %>.model';
import { <%= entityAngularName %>Service } from './<%= entityFileName %>.service';
<%_
let hasRelationshipQuery = false;
Object.keys(differentRelationships).forEach(key => {
    const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
        (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
        || rel.relationshipType !== 'one-to-many'
    );
    if (hasAnyRelationshipQuery) {
        hasRelationshipQuery = true;
    }
    if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
        const uniqueRel = differentRelationships[key][0];
        if (uniqueRel.otherEntityAngularName === 'User') { _%>
import { User } from '#app/services/user/user.model';
import { UserService } from '#app/services/user/user.service';
    <%_ } else if (uniqueRel.otherEntityAngularName !== entityAngularName) { _%>
import { <%= uniqueRel.otherEntityAngularName %>, <%= uniqueRel.otherEntityAngularName%>Service } from '../<%= uniqueRel.otherEntityModulePath %>';
    <%_}
    }
}); _%>

@Component({
    selector: 'page-<%= entityFileName %>-update',
    templateUrl: '<%= entityFileName %>-update.html'
})
export class <%= entityAngularName %>UpdatePage implements OnInit {

    <%= entityInstance %>: <%= entityAngularName %>;
    <%_ for (const idx in variables) { _%>
    <%- variables[idx] %>
    <%_ } _%>
    <%_ if (anyFieldHasImageContentType) { _%>
      @ViewChild('fileInput', { static: false }) fileInput;
      imageOptions: ImageOptions;
    <%_ } _%>
    <%_ for ( idx in fields ) {
        const fieldName = fields[idx].fieldName;
        const fieldType = fields[idx].fieldType;
        if ( fieldType === 'LocalDate' ) { _%>
    <%= fieldName %>Dp: any;
        <%_ } else if ( ['Instant', 'ZonedDateTime'].includes(fieldType) ) { _%>
    <%= fieldName %>: string;
        <%_ } _%>
    <%_ } _%>
    isSaving = false;
    isNew = true;
    isReadyToSave: boolean;
<%_ if (anyFieldHasImageContentType) { _%>
    useCameraCapacitor: boolean;
<%_ } _%>

    form = inject(FormBuilder).group({
    <%_ for (idx in fields) {
        const fieldName = fields[idx].fieldName;
        const fieldType = fields[idx].fieldType;
    _%>
        <%_ if (fieldType === 'Boolean') { _%>
        <%= fieldName %>: ['false', [<% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.indexOf('required') !== -1) { %>Validators.required<% } %>]],
        <%_ } else { _%>
        <%= fieldName %>: [null, [<% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.indexOf('required') !== -1) { %>Validators.required<% } %>]],
        <%_ } _%>
        <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fields[idx].fieldTypeBlobContent !== 'text') { _%>
        <%= fieldName %>ContentType: [null, []],
        <%_ } _%>
    <%_ } _%>
<%_ for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const ownerSide = relationships[idx].ownerSide;
    const relationshipName = relationships[idx].relationshipName;
    const relationshipFieldName = relationships[idx].relationshipFieldName;
    const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural; _%>
    <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
        <%_ if (dto === 'no') { _%>
        <%=relationshipName %>: [null, [<%_ if (relationships[idx].relationshipValidate === true) { _%>Validators.required <%_ } _%>]],
        <%_ } else { _%>
          <%=relationshipName %>Id: [null, [<%_ if (relationships[idx].relationshipValidate === true) { _%>Validators.required <%_ } _%>]],
        <%_ } _%>
    <%_ } else if (relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) { _%>
          <%=relationshipFieldNamePlural %>: [null, [<%_ if (relationships[idx].relationshipValidate === true) { _%>Validators.required <%_ } _%>]],
    <%_ } _%>
<%_ } _%>
    });

    constructor(
        protected activatedRoute: ActivatedRoute,
        protected navController: NavController,
        public platform: Platform,
        protected toastCtrl: ToastController,
<%_ if (anyFieldIsBlobDerived) { _%>
        private dataUtils: JhiDataUtils,
<%_ } _%>
<% if (anyFieldHasImageContentType) { %>
        private alertController: AlertController,
<%_ } _%>
<%_ Object.keys(differentRelationships).forEach(key => {
        if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
            const uniqueRel = differentRelationships[key][0];
            if (uniqueRel.otherEntityAngularName !== entityAngularName) { _%>
        private <%= uniqueRel.otherEntityName %>Service: <%= uniqueRel.otherEntityAngularName %>Service,
            <%_
            }
        }
    });
_%>
        private <%= entityInstance %>Service: <%= entityAngularName %>Service
    ) {

        // Watch the form for changes, and
        this.form.valueChanges.subscribe((v) => {
            this.isReadyToSave = this.form.valid;
        });
<%_ if (anyFieldHasImageContentType) { _%>

        // Set the Camera options
        this.imageOptions = {
            quality: 100,
            width: 900,
            height: 600,
            resultType: CameraResultType.DataUrl,
            allowEditing: true,
        };
<%_ } _%>
    }

    ngOnInit() {
    <%_ for (idx in queries) {
        if (queries[idx].indexOf('userService') > -1) { _%>
        this.userService.findAll().subscribe(data => this.users = data, (error) => this.onError(error));
        <%_ } else { _%>
        <%- queries[idx] %>
    <%_ } } _%>
        this.activatedRoute.data.subscribe((response) => {
            this.<%= entityInstance %> = response.data;
            this.isNew = this.<%= entityInstance %>.id === null || this.<%= entityInstance %>.id === undefined;
            this.updateForm(this.<%= entityInstance %>);
        });
<%_ if (anyFieldHasImageContentType) { _%>

        this.useCameraCapacitor = Capacitor.isPluginAvailable('Camera');
<%_ } _%>
    }

    updateForm(<%= entityInstance %>: <%= entityAngularName %>) {
        this.form.patchValue({
        <%_ for ( idx in fields ) {
            const fieldName = fields[idx].fieldName;
            const fieldType = fields[idx].fieldType;
        _%>
          <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <%= fieldName %>: this.isNew ? new Date().toISOString() : <%= entityInstance %>.<%= fieldName %>,
          <%_ } else if (fieldType === 'LocalDate') { _%>
            <%= fieldName %>: this.isNew ? new Date().toISOString().split('T')[0] : <%= entityInstance %>.<%= fieldName %>,
          <%_ } else { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %>,
          <%_ } _%>
          <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fields[idx].fieldTypeBlobContent !== 'text') { _%>
            <%= fieldName %>ContentType: <%= entityInstance %>.<%= fieldName %>ContentType,
          <%_ } _%>
        <%_ } _%>
<%_ for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const ownerSide = relationships[idx].ownerSide;
    const relationshipName = relationships[idx].relationshipName;
    const relationshipFieldName = relationships[idx].relationshipFieldName;
    const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural; _%>
    <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
        <%_ if (dto === 'no') { _%>
            <%=relationshipName %>: <%= entityInstance %>.<%=relationshipFieldName %>,
        <%_ } else { _%>
            <%=relationshipName %>Id: <%= entityInstance %>.<%=relationshipFieldName %>Id,
        <%_ } _%>
    <%_ } else if (relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) { _%>
            <%=relationshipFieldNamePlural %>: <%=entityInstance %>.<%=relationshipFieldNamePlural %>,
    <%_ } _%>
<%_ } _%>
        });
    }

    save() {
        this.isSaving = true;
        const <%= entityInstance %> = this.createFromForm();
        <%_ for ( idx in fields ) {
            const fieldName = fields[idx].fieldName;
            const fieldType = fields[idx].fieldType;
        _%>
        <%_ if (['LocalDate'].includes(fieldType)) { _%>
        <%= entityInstance %>.<%= fieldName %> = new Date(<%= entityInstance %>.<%= fieldName %>).toISOString().split('T')[0];
        <%_ } _%>
        <%_ } _%>
        if (!this.isNew) {
            this.subscribeToSaveResponse(this.<%= entityInstance %>Service.update(<%= entityInstance %>));
        } else {
            this.subscribeToSaveResponse(this.<%= entityInstance %>Service.create(<%= entityInstance %>));
        }
    }

    async onSaveSuccess(response) {
        let action = 'updated';
        if (response.status === 201) {
          action = 'created';
        }
        this.isSaving = false;
        const toast = await this.toastCtrl.create({message: `<%= entityAngularName %> ${action} successfully.`, duration: 2000, position: 'middle'});
        await toast.present();
        await this.navController.navigateBack('/tabs/entities/<%= entityFileName %>');
    }

    previousState() {
        window.history.back();
    }

    async onError(error) {
        this.isSaving = false;
        console.error(error);
        const toast = await this.toastCtrl.create({message: 'Failed to load data', duration: 2000, position: 'middle'});
        await toast.present();
    }
<%_ if (anyFieldIsBlobDerived) { _%>

    byteSize(field) {
        return this.dataUtils.byteSize(field);
    }
<%_ } _%>
<%_ if (anyFieldHasImageContentType) { _%>

    async getPicture(fieldName) {
      if (this.useCameraCapacitor) {
        try {
          if (Capacitor.isNativePlatform()) {
            const permissions = await Camera.requestPermissions({ permissions: ['camera', 'photos'] });
            if ([permissions.camera, permissions.photos].every(permission => permission === 'denied')) {
              const alert = await this.alertController.create({
                header: "You don't have permission",
                buttons: [{ text: 'Ok' }],
              });
              return alert.present();
            }
          }
          const image = await Camera.getPhoto(this.imageOptions);
          const [meta, imageData] = image.dataUrl.split(',', 2);
          // data:contentType,base64
          const contentType = meta.split(':')[1].split(';')[0].trim();

          const patchValue = { [fieldName]: imageData, [fieldName + 'ContentType']: contentType };
          Object.assign(this.<%= entityInstance %>, patchValue);
          this.form.patchValue(patchValue);
        } catch (error) {
          console.log(error);
        }
      } else {
        this.fileInput.nativeElement.click();
      }
    }

    processWebImage(event, fieldName) {
      const reader = new FileReader();
      reader.onload = readerEvent => {
        let imageData = (readerEvent.target as any).result;
        const imageType = event.target.files[0].type;
        imageData = imageData.substring(imageData.indexOf(',') + 1);

        this.form.patchValue({ [fieldName]: imageData });
        this.form.patchValue({ [fieldName + 'ContentType']: imageType });
        this.<%= entityInstance %>[fieldName] = imageData;
        this.<%= entityInstance %>[fieldName + 'ContentType'] = imageType;
      };

      reader.readAsDataURL(event.target.files[0]);
    }

    clearInputImage(field: string) {
      const patchValue = { [field]: null, [field + 'ContentType']: null };
      Object.assign(this.<%= entityInstance %>, patchValue);
      this.form.patchValue(patchValue);
    }
<%_ } _%>

<%_ if (anyFieldIsBlobDerived) { _%>
    setFileData(event, field, isImage) {
        this.dataUtils.loadFileToForm(event, this.form, field, isImage).subscribe();
  <%_ if (anyFieldHasImageContentType) { _%>
        if (isImage) {
            this.processWebImage(event, field);
        }
  <%_ } _%>
    }
<%_ } _%>

<%_
  const entitiesSeen = [];
  for (idx in relationships) {
    const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
    if(relationships[idx].relationshipType !== 'one-to-many' && !entitiesSeen.includes(otherEntityNameCapitalized)) {
_%>
    compare<%- otherEntityNameCapitalized -%>(first: <%- relationships[idx].otherEntityAngularName -%>, second: <%- relationships[idx].otherEntityAngularName -%>): boolean {
        return first && first.id && second && second.id ? first.id === second.id : first === second;
    }

    track<%- otherEntityNameCapitalized -%>ById(index: number, item: <%- relationships[idx].otherEntityAngularName -%>) {
        return item.id;
    }
<%_
      entitiesSeen.push(otherEntityNameCapitalized);
    }
  }
_%>

    protected subscribeToSaveResponse(result: Observable<HttpResponse<<%= entityAngularName %>>>) {
        result.subscribe((res: HttpResponse<<%= entityAngularName %>>) => this.onSaveSuccess(res), (res: HttpErrorResponse) => this.onError(res.error));
    }

    private createFromForm(): <%= entityAngularName %> {
        return {
            ...new <%= entityAngularName %>(),
        <%_ for ( idx in fields ) {
            const fieldName = fields[idx].fieldName;
            const fieldType = fields[idx].fieldType;
        _%>
          <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <%= fieldName %>: new Date(this.form.get(['<%= fieldName %>']).value),
          <%_ } else { _%>
            <%= fieldName %>: this.form.get(['<%= fieldName %>']).value,
          <%_ } _%>
          <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fields[idx].fieldTypeBlobContent !== 'text') { _%>
            <%= fieldName %>ContentType: this.form.get(['<%= fieldName %>ContentType']).value,
          <%_ } _%>
        <%_ } _%>
<%_ for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const ownerSide = relationships[idx].ownerSide;
    const relationshipName = relationships[idx].relationshipName;
    const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural; _%>
    <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
            <%_ if (dto === 'no') { _%>
            <%= relationshipName %>: this.form.get(['<%= relationshipName %>']).value,
            <%_ } else { _%>
            <%= relationshipName %>Id: this.form.get(['<%= relationshipName %>Id']).value,
            <%_ } _%>
        <%_ } else if (relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) { _%>
            <%= relationshipFieldNamePlural %>: this.form.get(['<%= relationshipFieldNamePlural %>']).value,
        <%_ } _%>
<%_ } _%>
        };
    }
}
